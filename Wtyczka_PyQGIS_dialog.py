# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WtyczkaPyQGISDialog
                                 A QGIS plugin
 Wtyczka na projekt 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Ida Martyna
        email                : idarocho@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

import numpy as np
from scipy.spatial import Delaunay
from math import sqrt
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsMessageLog, Qgis
from qgis.core import QgsProject, QgsPointXY
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Wtyczka_PyQGIS_dialog_base.ui'))


class WtyczkaPyQGISDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WtyczkaPyQGISDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.policz_H.clicked.connect(self.policzH)
        self.policz_P.clicked.connect(self.policzP)
    
    def policzH(self):
        if self.warstwa.currentLayer() is None:
            iface.messageBar().pushMessage('Nie wybrano aktywnej warstwy.', level = Qgis.Warning)
            return False

        zaznaczone_elementy = self.warstwa.currentLayer().selectedFeatures()
        if len(zaznaczone_elementy) < 2:
            iface.messageBar().pushMessage('Wybierz co najmniej 2 punkty na warstwie.', level = Qgis.Warning)
            return False
        
        
        zaznaczone_elementy = self.warstwa.currentLayer().selectedFeatures()
        if len(zaznaczone_elementy) >  2:
            iface.messageBar().pushMessage('Wybierz co najwyżej 2 punkty na warstwie.',level = Qgis.Warning)
            return False
        
        zaznaczone_elementy = self.warstwa.currentLayer().selectedFeatures()
        h1 = zaznaczone_elementy[0]['h_plevrf2007nh'] 
        h2 = zaznaczone_elementy[1]['h_plevrf2007nh'] 
        roznica_H = float(h2)-float(h1)
        if roznica_H<0:
            roznica_H = roznica_H*(-1)
        elif roznica_H>0:
            roznica_H = roznica_H
        self.label_H.setText(str(roznica_H))
        
        iface.messageBar().pushMessage('Różnica wysokości między punktami wynosi: ' + str(roznica_H) + ' m' , Qgis.Success)
        
        
        
         
             
    def policzP(self):
        zaznaczone_elementy = self.warstwa.currentLayer().selectedFeatures()
        punkty = []
        for o in zaznaczone_elementy:
            x = float(o.attribute('x2000'))
            y = float(o.attribute('y2000'))
            x = float(o.geometry().asPoint().x())
            y = float(o.geometry().asPoint().y())
            p = QgsPointXY(x, y)
            punkty.append(p)

        if len(zaznaczone_elementy) < 3:
            iface.messageBar().pushMessage('Wybierz co najmniej 3 punkty na warstwie.', level=Qgis.Warning)
            return False

        pole = 0
        dl = len(zaznaczone_elementy)
        for i in range(dl):
            a = (i + 1) % dl
            pole += (punkty[a].x() + punkty[i].x()) * (punkty[a].y() - punkty[i].y())
        pole /= 2
        pole = round(abs(pole / 10000), 3)

        self.label_P.setText(str(pole) + ' ha')
        iface.messageBar().pushMessage(f'Pole powierzchni między zaznaczonymi punktami: {pole} ha', level=Qgis.Success)

        
        
    
        
        
